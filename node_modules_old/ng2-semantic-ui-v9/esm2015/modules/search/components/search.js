import { __decorate } from "tslib";
import { Component, ViewChild, HostBinding, Input, AfterViewInit, HostListener, EventEmitter, Output, Directive, ElementRef, TemplateRef, Renderer2 } from "@angular/core";
import { Util } from "../../../misc/util/internal";
import { DropdownService, SuiDropdownMenu } from "../../dropdown/internal";
import { ISearchLocaleValues, RecursivePartial, SuiLocalizationService } from "../../../behaviors/localization/internal";
import { SearchService } from "../services/search.service";
let SuiSearch = class SuiSearch {
    constructor(_element, renderer, _localizationService) {
        this._element = _element;
        this._localizationService = _localizationService;
        this.dropdownService = new DropdownService();
        this.searchService = new SearchService();
        this.onLocaleUpdate();
        this._localizationService.onLanguageUpdate.subscribe(() => this.onLocaleUpdate());
        this.hasClasses = true;
        this.tabindex = 0;
        this.hasIcon = true;
        this.retainSelectedResult = true;
        this.searchDelay = 200;
        this.maxResults = 7;
        this.onResultSelected = new EventEmitter();
        this.transition = "scale";
        this.transitionDuration = 200;
    }
    get isActive() {
        return this.dropdownService.isOpen;
    }
    // Gets & sets the placeholder text displayed inside the text input.
    get placeholder() {
        return this._placeholder || this.localeValues.placeholder;
    }
    set placeholder(placeholder) {
        this._placeholder = placeholder;
    }
    get localeValues() {
        return this._localizationService.override(this._localeValues, this.localeOverrides);
    }
    get query() {
        return this.searchService.query;
    }
    set query(query) {
        this.selectedResult = undefined;
        // Initialise a delayed search.
        this.searchService.updateQueryDelayed(query, () => 
        // Set the results open state depending on whether a query has been entered.
        this.dropdownService.setOpenState(this.searchService.query.length > 0));
    }
    set options(options) {
        if (options) {
            this.searchService.options = options;
        }
    }
    set optionsFilter(filter) {
        if (filter) {
            this.searchService.optionsFilter = filter;
        }
    }
    set optionsLookup(lookupFn) {
        this.searchService.optionsLookup = lookupFn;
    }
    set optionsField(field) {
        this.searchService.optionsField = field;
    }
    get resultFormatter() {
        if (this._resultFormatter) {
            return this._resultFormatter;
        }
        else if (this.searchService.optionsLookup) {
            return r => this.readValue(r);
        }
        else {
            return (r, q) => this.searchService.highlightMatches(this.readValue(r), q);
        }
    }
    set resultFormatter(formatter) {
        this._resultFormatter = formatter;
    }
    set searchDelay(delay) {
        this.searchService.searchDelay = delay;
    }
    get isSearching() {
        return this.searchService.isSearching;
    }
    get results() {
        return this.searchService.results.slice(0, this.maxResults);
    }
    ngAfterViewInit() {
        this._menu.service = this.dropdownService;
    }
    onLocaleUpdate() {
        this._localeValues = this._localizationService.get().search;
    }
    // Selects a result.
    select(result) {
        this.onResultSelected.emit(result);
        this.dropdownService.setOpenState(false);
        if (this.retainSelectedResult) {
            this.selectedResult = result;
            this.searchService.updateQuery(this.readValue(result));
        }
        else {
            this.searchService.updateQuery("");
        }
    }
    onClick(e) {
        this.open();
    }
    onFocusIn() {
        if (!this.dropdownService.isAnimating) {
            this.open();
        }
    }
    open() {
        if (this.searchService.query.length > 0) {
            // Only open on click when there is a query entered.
            this.dropdownService.setOpenState(true);
        }
    }
    onFocusOut(e) {
        console.log(e);
        if (!this._element.nativeElement.contains(e.relatedTarget)) {
            this.dropdownService.setOpenState(false);
        }
    }
    // Reads the specified field from an item.
    readValue(object) {
        return Util.Object.readValue(object, this.searchService.optionsField);
    }
};
SuiSearch.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: SuiLocalizationService }
];
__decorate([
    ViewChild(SuiDropdownMenu, { static: true })
], SuiSearch.prototype, "_menu", void 0);
__decorate([
    HostBinding("class.ui"),
    HostBinding("class.search")
], SuiSearch.prototype, "hasClasses", void 0);
__decorate([
    HostBinding("attr.tabindex")
], SuiSearch.prototype, "tabindex", void 0);
__decorate([
    HostBinding("class.active")
], SuiSearch.prototype, "isActive", null);
__decorate([
    Input()
], SuiSearch.prototype, "hasIcon", void 0);
__decorate([
    Input()
], SuiSearch.prototype, "placeholder", null);
__decorate([
    Input()
], SuiSearch.prototype, "options", null);
__decorate([
    Input()
], SuiSearch.prototype, "optionsFilter", null);
__decorate([
    Input()
], SuiSearch.prototype, "optionsLookup", null);
__decorate([
    Input()
], SuiSearch.prototype, "optionsField", null);
__decorate([
    Input()
], SuiSearch.prototype, "resultFormatter", null);
__decorate([
    Input()
], SuiSearch.prototype, "resultTemplate", void 0);
__decorate([
    Input()
], SuiSearch.prototype, "retainSelectedResult", void 0);
__decorate([
    Input()
], SuiSearch.prototype, "searchDelay", null);
__decorate([
    HostBinding("class.loading")
], SuiSearch.prototype, "isSearching", null);
__decorate([
    Input()
], SuiSearch.prototype, "maxResults", void 0);
__decorate([
    Output("resultSelected")
], SuiSearch.prototype, "onResultSelected", void 0);
__decorate([
    Input()
], SuiSearch.prototype, "transition", void 0);
__decorate([
    Input()
], SuiSearch.prototype, "transitionDuration", void 0);
__decorate([
    HostListener("focusin")
], SuiSearch.prototype, "onFocusIn", null);
__decorate([
    HostListener("focusout", ["$event"])
], SuiSearch.prototype, "onFocusOut", null);
SuiSearch = __decorate([
    Component({
        selector: "sui-search",
        template: `
<div class="ui input" [class.icon]="hasIcon" (click)="onClick($event)">
    <input class="prompt" type="text" [attr.placeholder]="placeholder" autocomplete="off" [(ngModel)]="query">
    <i *ngIf="hasIcon" class="search icon"></i>
</div>
<div class="results"
     suiDropdownMenu
     [menuTransition]="transition"
     [menuTransitionDuration]="transitionDuration"
     menuSelectedItemClass="active">

    <sui-search-result *ngFor="let r of results"
                       class="item"
                       [value]="r"
                       [query]="query"
                       [formatter]="resultFormatter"
                       [template]="resultTemplate"
                       (click)="select(r)"></sui-search-result>

    <div *ngIf="results.length == 0" class="message empty">
        <div class="header">{{ localeValues.noResults.header }}</div>
        <div class="description">{{ localeValues.noResults.message }}</div>
    </div>
</div>
`,
        styles: [`
/* Ensures results div has margin. */
:host {
    display: inline-block;
    outline: 0;
}

/* Fixes positioning when results are pushed above the search. */
.results {
    margin-bottom: .5em;
}
`]
    })
], SuiSearch);
export { SuiSearch };
//# sourceMappingURL=data:application/json;base64,