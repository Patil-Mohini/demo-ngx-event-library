import { __decorate } from "tslib";
import { Directive, Input, ElementRef, TemplateRef, Renderer2 } from "@angular/core";
import { ITemplateRefContext, Util, PositioningPlacement, SuiComponentFactory } from "../../../misc/util/internal";
import { PopupConfig } from "../classes/popup-config";
import { SuiPopupConfig } from "../services/popup.service";
import { SuiPopupTemplateController } from "../classes/popup-template-controller";
const templateRef = TemplateRef;
let SuiPopupDirective = class SuiPopupDirective extends SuiPopupTemplateController {
    constructor(renderer, element, componentFactory, popupDefaults) {
        super(renderer, element, componentFactory, new PopupConfig(popupDefaults));
    }
    set popupHeader(header) {
        this.popup.config.header = header;
    }
    set popupText(text) {
        this.popup.config.text = text;
    }
    set popupInverted(inverted) {
        this.popup.config.isInverted = Util.DOM.parseBooleanAttribute(inverted);
    }
    set popupBasic(basic) {
        this.popup.config.isBasic = Util.DOM.parseBooleanAttribute(basic);
    }
    set popupInline(inline) {
        this.popup.config.isInline = Util.DOM.parseBooleanAttribute(inline);
    }
    set popupFlowing(flowing) {
        this.popup.config.isFlowing = Util.DOM.parseBooleanAttribute(flowing);
    }
    set popupTransition(transition) {
        this.popup.config.transition = transition;
    }
    set popupTransitionDuration(duration) {
        this.popup.config.transitionDuration = duration;
    }
    set popupPlacement(placement) {
        this.popup.config.placement = placement;
    }
    set popupWidth(width) {
        this.popup.config.width = width;
    }
    set popupSize(size) {
        this.popup.config.size = size;
    }
    set popupDelay(delay) {
        this.popup.config.delay = delay;
    }
    get popupTrigger() {
        return this.popup.config.trigger;
    }
    set popupTrigger(trigger) {
        this.popup.config.trigger = trigger;
    }
    set popupTemplate(template) {
        this.template = template;
    }
    set popupTemplateContext(context) {
        this.context = context;
    }
    set popupConfig(config) {
        this.configure(config);
    }
};
SuiPopupDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: SuiComponentFactory },
    { type: SuiPopupConfig }
];
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupHeader", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupText", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupInverted", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupBasic", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupInline", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupFlowing", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupTransition", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupTransitionDuration", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupPlacement", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupWidth", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupSize", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupDelay", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupTrigger", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupTemplate", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupTemplateContext", null);
__decorate([
    Input()
], SuiPopupDirective.prototype, "popupConfig", null);
SuiPopupDirective = __decorate([
    Directive({
        selector: "[suiPopup]",
        exportAs: "suiPopup"
    })
], SuiPopupDirective);
export { SuiPopupDirective };
//# sourceMappingURL=data:application/json;base64,