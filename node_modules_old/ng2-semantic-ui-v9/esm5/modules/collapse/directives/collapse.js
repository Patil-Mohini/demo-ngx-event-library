import { __decorate } from "tslib";
import { Directive, ElementRef, Input, HostBinding, Renderer2 } from "@angular/core";
var SuiCollapse = /** @class */ (function () {
    function SuiCollapse(_element, _renderer) {
        this._element = _element;
        this._renderer = _renderer;
        this._pristine = true;
        // Collapse animation duration is 350ms by default.
        this.collapseDuration = 350;
        this._isExpanded = false;
        this._isCollapsing = false;
    }
    Object.defineProperty(SuiCollapse.prototype, "isExpanded", {
        // Set when the collapse is open, and not animating.
        get: function () {
            return this._isExpanded;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiCollapse.prototype, "isCollapsed", {
        // Set when the collapse is closed, and not animating.
        get: function () {
            return !this.isExpanded && !this.isCollapsing;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiCollapse.prototype, "isCollapsing", {
        // Set when the collapse is animating.
        get: function () {
            return this._isCollapsing;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiCollapse.prototype, "suiCollapse", {
        get: function () {
            return this._isExpanded;
        },
        // Sets the state of the collapse, `true` is collapsed.
        set: function (value) {
            if (value) {
                this.hide();
            }
            else {
                this.show();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SuiCollapse.prototype, "_animationDuration", {
        get: function () {
            return this._pristine ? 0 : this.collapseDuration;
        },
        enumerable: true,
        configurable: true
    });
    SuiCollapse.prototype.hide = function () {
        var _this = this;
        this._isCollapsing = true;
        this._isExpanded = false;
        // Forcibly hide the overflow so that content is not visible past the boundaries of its container.
        this._renderer.setStyle(this._element.nativeElement, "overflow", "hidden");
        // Animate the host element from its scroll height to 0.
        this.animate(this._element.nativeElement.scrollHeight, 0, false, function () {
            _this._isCollapsing = false;
        });
    };
    SuiCollapse.prototype.show = function () {
        var _this = this;
        this._isCollapsing = true;
        // Animate the host element from its offset height to its scroll height.
        this.animate(this._element.nativeElement.offsetHeight, this._element.nativeElement.scrollHeight, true, function () {
            // Remove the overflow override to enable user styling once again.
            _this._renderer.removeStyle(_this._element.nativeElement, "overflow");
            _this._isCollapsing = false;
            _this._isExpanded = true;
        });
    };
    SuiCollapse.prototype.animate = function (startHeight, endHeight, removeOnComplete, callback) {
        if (removeOnComplete === void 0) { removeOnComplete = false; }
        if (callback === void 0) { callback = function () { }; }
        var heightFrames = [
            {
                offset: 0,
                height: startHeight + "px"
            },
            {
                offset: 1,
                height: endHeight + "px"
            }
        ];
        if (removeOnComplete) {
            heightFrames.push({
                offset: 1,
                height: "auto"
            });
        }
        // Animate the collapse using the web animations API.
        // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.
        this._element.nativeElement.animate(heightFrames, {
            delay: 0,
            // Disable animation on 1st collapse / expansion.
            duration: this._animationDuration,
            iterations: 1,
            easing: "ease",
            fill: "both"
        });
        if (this._pristine) {
            // Remove pristine flag when first hit.
            this._pristine = false;
        }
        setTimeout(function () { return callback(); }, this.collapseDuration);
    };
    SuiCollapse.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        HostBinding("class.expanded")
    ], SuiCollapse.prototype, "isExpanded", null);
    __decorate([
        HostBinding("class.collapsed")
    ], SuiCollapse.prototype, "isCollapsed", null);
    __decorate([
        HostBinding("class.collapsing")
    ], SuiCollapse.prototype, "isCollapsing", null);
    __decorate([
        Input()
    ], SuiCollapse.prototype, "suiCollapse", null);
    __decorate([
        Input()
    ], SuiCollapse.prototype, "collapseDuration", void 0);
    SuiCollapse = __decorate([
        Directive({
            selector: "[suiCollapse]"
        })
    ], SuiCollapse);
    return SuiCollapse;
}());
export { SuiCollapse };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzItc2VtYW50aWMtdWktdjkvIiwic291cmNlcyI6WyJtb2R1bGVzL2NvbGxhcHNlL2RpcmVjdGl2ZXMvY29sbGFwc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS3JGO0lBK0NJLHFCQUEyQixRQUFtQixFQUFVLFNBQW1CO1FBQWhELGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFVO1FBQ3ZFLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBRXRCLG1EQUFtRDtRQUNuRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO1FBRTVCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQy9CLENBQUM7SUFwREQsc0JBQVcsbUNBQVU7UUFGckIsb0RBQW9EO2FBRXBEO1lBQ0ksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzVCLENBQUM7OztPQUFBO0lBTUQsc0JBQVcsb0NBQVc7UUFGdEIsc0RBQXNEO2FBRXREO1lBQ0ksT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ2xELENBQUM7OztPQUFBO0lBSUQsc0JBQVcscUNBQVk7UUFGdkIsc0NBQXNDO2FBRXRDO1lBQ0ksT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzlCLENBQUM7OztPQUFBO0lBUUQsc0JBQVcsb0NBQVc7YUFBdEI7WUFDSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDNUIsQ0FBQztRQUVELHVEQUF1RDthQUN2RCxVQUF1QixLQUFhO1lBQ2hDLElBQUksS0FBSyxFQUFFO2dCQUNQLElBQUksQ0FB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TUQ7UUFEQyxXQUFXLENBQUMsaUJBQWlCLENBQUM7a0RBRzlCO0lBSUQ7UUFEQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7bURBRy9CO0lBUUQ7UUFEQyxLQUFLLEVBQUU7a0RBR1A7SUFZRDtRQURDLEtBQUssRUFBRTt5REFDdUI7SUF6Q3RCLFdBQVc7UUFIdkIsU0FBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGVBQWU7U0FDNUIsQ0FBQztPQUNXLFdBQVcsQ0EySHZCO0lBQUQsa0JBQUM7Q0FBQSxBQTNIRCxJQTJIQztTQTNIWSxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgSG9zdEJpbmRpbmcsIFJlbmRlcmVyMiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiBcIltzdWlDb2xsYXBzZV1cIlxufSlcbmV4cG9ydCBjbGFzcyBTdWlDb2xsYXBzZSB7XG4gICAgLy8gU2V0IHdoZW4gdGhlIGNvbGxhcHNlIGlzIG9wZW4sIGFuZCBub3QgYW5pbWF0aW5nLlxuICAgIEBIb3N0QmluZGluZyhcImNsYXNzLmV4cGFuZGVkXCIpXG4gICAgcHVibGljIGdldCBpc0V4cGFuZGVkKCk6Ym9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0V4cGFuZGVkO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2lzRXhwYW5kZWQ6Ym9vbGVhbjtcblxuICAgIC8vIFNldCB3aGVuIHRoZSBjb2xsYXBzZSBpcyBjbG9zZWQsIGFuZCBub3QgYW5pbWF0aW5nLlxuICAgIEBIb3N0QmluZGluZyhcImNsYXNzLmNvbGxhcHNlZFwiKVxuICAgIHB1YmxpYyBnZXQgaXNDb2xsYXBzZWQoKTpib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmlzRXhwYW5kZWQgJiYgIXRoaXMuaXNDb2xsYXBzaW5nO1xuICAgIH1cblxuICAgIC8vIFNldCB3aGVuIHRoZSBjb2xsYXBzZSBpcyBhbmltYXRpbmcuXG4gICAgQEhvc3RCaW5kaW5nKFwiY2xhc3MuY29sbGFwc2luZ1wiKVxuICAgIHB1YmxpYyBnZXQgaXNDb2xsYXBzaW5nKCk6Ym9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0NvbGxhcHNpbmc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfaXNDb2xsYXBzaW5nOmJvb2xlYW47XG5cbiAgICAvLyBGbGFnIHRoYXQgaXMgaW5pdGlhbGx5IHRydWUsIHRvIG1ha2UgdGhlIDFzdCBhbmltYXRpb24gaW5zdGFudGFuZW91cy5cbiAgICBwcml2YXRlIF9wcmlzdGluZTpib29sZWFuO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IHN1aUNvbGxhcHNlKCk6Ym9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0V4cGFuZGVkO1xuICAgIH1cblxuICAgIC8vIFNldHMgdGhlIHN0YXRlIG9mIHRoZSBjb2xsYXBzZSwgYHRydWVgIGlzIGNvbGxhcHNlZC5cbiAgICBwdWJsaWMgc2V0IHN1aUNvbGxhcHNlKHZhbHVlOmJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgY29sbGFwc2VEdXJhdGlvbjpudW1iZXI7XG5cbiAgICBwcml2YXRlIGdldCBfYW5pbWF0aW9uRHVyYXRpb24oKTpudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJpc3RpbmUgPyAwIDogdGhpcy5jb2xsYXBzZUR1cmF0aW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50OkVsZW1lbnRSZWYsIHByaXZhdGUgX3JlbmRlcmVyOlJlbmRlcmVyMikge1xuICAgICAgICB0aGlzLl9wcmlzdGluZSA9IHRydWU7XG5cbiAgICAgICAgLy8gQ29sbGFwc2UgYW5pbWF0aW9uIGR1cmF0aW9uIGlzIDM1MG1zIGJ5IGRlZmF1bHQuXG4gICAgICAgIHRoaXMuY29sbGFwc2VEdXJhdGlvbiA9IDM1MDtcblxuICAgICAgICB0aGlzLl9pc0V4cGFuZGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzQ29sbGFwc2luZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBoaWRlKCk6dm9pZCB7XG4gICAgICAgIHRoaXMuX2lzQ29sbGFwc2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMuX2lzRXhwYW5kZWQgPSBmYWxzZTtcblxuICAgICAgICAvLyBGb3JjaWJseSBoaWRlIHRoZSBvdmVyZmxvdyBzbyB0aGF0IGNvbnRlbnQgaXMgbm90IHZpc2libGUgcGFzdCB0aGUgYm91bmRhcmllcyBvZiBpdHMgY29udGFpbmVyLlxuICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZSh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIFwib3ZlcmZsb3dcIiwgXCJoaWRkZW5cIik7XG5cbiAgICAgICAgLy8gQW5pbWF0ZSB0aGUgaG9zdCBlbGVtZW50IGZyb20gaXRzIHNjcm9sbCBoZWlnaHQgdG8gMC5cbiAgICAgICAgdGhpcy5hbmltYXRlKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5zY3JvbGxIZWlnaHQsIDAsIGZhbHNlLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9pc0NvbGxhcHNpbmcgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNob3coKTp2b2lkIHtcbiAgICAgICAgdGhpcy5faXNDb2xsYXBzaW5nID0gdHJ1ZTtcblxuICAgICAgICAvLyBBbmltYXRlIHRoZSBob3N0IGVsZW1lbnQgZnJvbSBpdHMgb2Zmc2V0IGhlaWdodCB0byBpdHMgc2Nyb2xsIGhlaWdodC5cbiAgICAgICAgdGhpcy5hbmltYXRlKHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQsIHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5zY3JvbGxIZWlnaHQsIHRydWUsICgpID0+IHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgb3ZlcmZsb3cgb3ZlcnJpZGUgdG8gZW5hYmxlIHVzZXIgc3R5bGluZyBvbmNlIGFnYWluLlxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50LCBcIm92ZXJmbG93XCIpO1xuXG4gICAgICAgICAgICB0aGlzLl9pc0NvbGxhcHNpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX2lzRXhwYW5kZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFuaW1hdGUoc3RhcnRIZWlnaHQ6bnVtYmVyLCBlbmRIZWlnaHQ6bnVtYmVyLCByZW1vdmVPbkNvbXBsZXRlOmJvb2xlYW4gPSBmYWxzZSwgY2FsbGJhY2s6KCkgPT4gdm9pZCA9ICgpID0+IHt9KTp2b2lkIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0RnJhbWVzID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGAke3N0YXJ0SGVpZ2h0fXB4YFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBgJHtlbmRIZWlnaHR9cHhgXG4gICAgICAgICAgICB9XG4gICAgICAgIF07XG5cbiAgICAgICAgaWYgKHJlbW92ZU9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgIGhlaWdodEZyYW1lcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBgYXV0b2BcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQW5pbWF0ZSB0aGUgY29sbGFwc2UgdXNpbmcgdGhlIHdlYiBhbmltYXRpb25zIEFQSS5cbiAgICAgICAgLy8gVXNpbmcgZGlyZWN0bHkgYmVjYXVzZSBSZW5kZXJlcjIgZG9lc24ndCBoYXZlIGludm9rZUVsZW1lbnRNZXRob2QgbWV0aG9kIGFueW1vcmUuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudC5hbmltYXRlKFxuICAgICAgICAgICAgaGVpZ2h0RnJhbWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRlbGF5OiAwLFxuICAgICAgICAgICAgICAgIC8vIERpc2FibGUgYW5pbWF0aW9uIG9uIDFzdCBjb2xsYXBzZSAvIGV4cGFuc2lvbi5cbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogdGhpcy5fYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICAgICAgICAgICAgaXRlcmF0aW9uczogMSxcbiAgICAgICAgICAgICAgICBlYXNpbmc6IFwiZWFzZVwiLFxuICAgICAgICAgICAgICAgIGZpbGw6IFwiYm90aFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3ByaXN0aW5lKSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgcHJpc3RpbmUgZmxhZyB3aGVuIGZpcnN0IGhpdC5cbiAgICAgICAgICAgIHRoaXMuX3ByaXN0aW5lID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGNhbGxiYWNrKCksIHRoaXMuY29sbGFwc2VEdXJhdGlvbik7XG4gICAgfVxufVxuIl19